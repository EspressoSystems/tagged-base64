var searchIndex = new Map(JSON.parse('[\
["tagged_base64",{"doc":"User-oriented format for binary data. Tagged Base64 is …","t":"SPPPPFPPSKFGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNXNNHNNNNNNNNNNNNNNNNO","n":["BASE64","Base64","InvalidChecksum","InvalidData","InvalidTag","JsTaggedBase64","MissingChecksum","MissingDelimiter","TB64_DELIM","Tagged","TaggedBase64","Tb64Error","as_error_source","as_ref","backtrace","batch_check","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cause","check","clone","clone","clone_into","clone_into","decode_raw","description","deserialize","deserialize_with_mode","encode_raw","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_str","into","into","into","is_safe_base64_ascii","is_safe_base64_tag","new","parse","serialize","serialize_with_mode","serialized_size","set_tag","set_value","source","tag","tag","tagged","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value","vzip","vzip","vzip","message"],"q":[[0,"tagged_base64"],[82,"tagged_base64::Tb64Error"],[83,"core::error"],[84,"std::backtrace"],[85,"core::option"],[86,"ark_serialize::error"],[87,"core::result"],[88,"core::iter::traits::iterator"],[89,"core::marker"],[90,"alloc::vec"],[91,"serde::de"],[92,"ark_serialize"],[93,"ark_serialize"],[94,"alloc::string"],[95,"core::fmt"],[96,"core::fmt"],[97,"serde::ser"],[98,"ark_std::io"]],"d":["Base 64 engine configured for TaggedBase64.","","The checksum was truncated or did not match.","The data did not encode the expected type.","An invalid character was found in the tag.","JavaScript-compatible wrapper for TaggedBase64","Missing checksum in value.","Missing delimiter.","Separator that does not appear in URL-safe base64 encoding …","Trait for types whose serialization is not human-readable.","A structure holding a string tag, vector of bytes, and a …","","","","","","","","","","","","","","","","","","Wraps the underlying base64 decoder.","","","","Wraps the underlying base64 encoder.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true for characters permitted in URL-safe base64 …","Checks that an ASCII byte is safe for use in the tag of a …","Constructs a TaggedBase64 from a tag and array of bytes. …","Parses a string of the form tag~value into a TaggedBase64 …","","","","Sets the tag of a TaggedBase64 instance.","Sets the value of a TaggedBase64 instance.","","","Gets the tag of a TaggedBase64 instance.","Derive serdes for a type which serializes as a binary blob.","","","Converts a TaggedBase64 value to a String.","","","","","","","","","","","","","Gets the value of a TaggedBase64 instance.","","","",""],"i":[0,5,5,5,5,0,5,5,0,0,0,0,5,2,5,2,2,14,5,2,14,5,5,2,2,14,2,14,2,5,2,2,2,2,14,14,2,2,14,14,5,5,2,14,5,5,2,2,14,5,2,2,2,2,2,2,2,2,2,5,31,2,0,2,14,0,2,14,5,2,14,5,2,14,5,2,14,5,2,2,14,5,32],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[-1,1,[]],[2,[[4,[3]]]],[5,[[7,[6]]]],[-1,[[10,[8,9]]],[[12,[],[[11,[2]]]],13]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,[[7,[1]]]],[2,[[10,[8,9]]]],[2,2],[14,14],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[15,[[10,[[16,[3]],5]]]],[5,15],[-1,[[10,[2]]],17],[[-1,18,19],[[10,[2,9]]],20],[[[4,[3]]],21],[[2,2],22],[[14,14],22],[[14,2],22],[[2,23],24],[[2,23],24],[[14,23],24],[[14,23],24],[[5,23],24],[[5,23],24],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[25,5],[15,[[10,[2,-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[26,22],[15,22],[[15,[4,[3]]],[[10,[2,5]]]],[15,[[10,[2,5]]]],[[2,-1],10,27],[[2,-1,18],[[10,[8,9]]],28],[[2,18],29],[[2,15],8],[[2,[4,[3]]],8],[5,[[7,[1]]]],[[],21],[2,21],0,[-1,-2,[],[]],[-1,-2,[],[]],[2,21],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[2,[[16,[3]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0],"c":[],"p":[[10,"Error",83],[5,"TaggedBase64",0],[1,"u8"],[1,"slice"],[6,"Tb64Error",0],[5,"Backtrace",84],[6,"Option",85],[1,"tuple"],[6,"SerializationError",86],[6,"Result",87],[17,"Item"],[10,"Iterator",88],[10,"Send",89],[5,"JsTaggedBase64",0],[1,"str"],[5,"Vec",90],[10,"Deserializer",91],[6,"Compress",92],[6,"Validate",92],[10,"Read",93],[5,"String",94],[1,"bool"],[5,"Formatter",95],[8,"Result",95],[6,"DecodeError",96],[1,"char"],[10,"Serializer",97],[10,"Write",93],[1,"usize"],[5,"TypeId",98],[10,"Tagged",0],[15,"Base64",82]],"b":[[34,"impl-PartialEq-for-JsTaggedBase64"],[35,"impl-PartialEq%3CTaggedBase64%3E-for-JsTaggedBase64"],[36,"impl-Debug-for-TaggedBase64"],[37,"impl-Display-for-TaggedBase64"],[38,"impl-Debug-for-JsTaggedBase64"],[39,"impl-Display-for-JsTaggedBase64"],[40,"impl-Debug-for-Tb64Error"],[41,"impl-Display-for-Tb64Error"]]}],\
["tagged_base64_macros",{"doc":"","t":"X","n":["tagged"],"q":[[0,"tagged_base64_macros"]],"d":[""],"i":[0],"f":[0],"c":[],"p":[],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
